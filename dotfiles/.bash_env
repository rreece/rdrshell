#!/bin/bash
#-----------------------------------------------------------------------------
# file: .bash_env
# author: Ryan Reece <ryan.reece@cern.ch>
# date : 2010-06-21
# -----------------------------------------------------------------------------


#-----------------------------------------------------------------------------
# resolve ME
#-----------------------------------------------------------------------------
## To customize this, you can write your own .bash_resolve_me file containing
## a definition of the function resolve_me().  The file could be as simple as:
##     export ME=foo
## or you could write an equivalent to the resolve_me() below for the systems
## that you use.  Just make sure it exports ME.
if [ -f ~/.bash_resolve_me ]; then
    source ~/.bash_resolve_me
else
    resolve_me()
    {
        CUR_ME="unknown"
        # check the HOSTNAME of the server
        case "$HOSTNAME" in
            lxplus*|pc-penn-*|trtdaq2|*.cern.ch)
                CUR_ME="afs"
            ;;
            at3*.hep.upenn.edu)
                CUR_ME="pennt3";
            ;;
            atlas*.ucsc.edu|int*.ucsc.edu|wrk*.ucsc.edu)
                CUR_ME="ucsct3"
            ;;
            borg5)
                CUR_ME="ucsc_web"
            ;;
            darwin)
                CUR_ME="nas"
            ;;
            *)
                # otherwise, check the os
                UNAME_OS=`uname`
                case "${UNAME_OS}" in
                    Darwin)
                        CUR_ME="mac"
                    ;;
                    Linux)
                        CUR_ME="linux"
                    ;;
                    SunOS)
                        CUR_ME="solaris"
                    ;;
                    *)
                        echo -e "${LIGHTRED}~/.bash_env doesn't recognize this host, ${HOSTNAME}.  Let's hope it has afs.${NC}"
                        CUR_ME="afs"
                    ;;
                esac
            ;;
        esac
        export ME=${CUR_ME}
    }

    # execute resolve_me
    resolve_me
fi


#-----------------------------------------------------------------------------
# environment helper functions
#-----------------------------------------------------------------------------
print_path()
{
    i=1;
    for p in $(echo $1 | tr -s ':' ' ') ; do
        printf "%6i. %s\n" $i "$p";
        let i++;
    done
}

get_os_simple()
{
    CUR_OS="unknown"
    UNAME_OS=$(uname)
    case "${UNAME_OS}" in
        Darwin)
            CUR_OS="mac"
        ;;
        Linux)
            CUR_OS="linux"
        ;;
        SunOS)
            CUR_OS="solaris"
        ;;
        *)
            true
        ;;
    esac
    export OS_SIMPLE=${CUR_OS}
    echo ${OS_SIMPLE}
}
get_os_simple &> /dev/null

get_os()
{
    CUR_OS="unknown"
    simple=$(get_os_simple)
    case "${simple}" in
        linux)
            if [[ -r '/etc/issue' ]] ; then
                # check /etc/issue
                CUR_OS=$(echo $(head -1 /etc/issue) | cut -d'\' -f1)
            fi
        ;;
        mac)
            # check for mac file structure
            if [ -d "/System" ]; then 
                CUR_OS="Mac OS `sw_vers -productVersion`"
            fi
        ;;
        solaris)
            if [[ -r '/etc/release' ]] ; then
                # check /etc/issue
                CUR_OS=$(echo $(head -1 /etc/release) | cut -d'\' -f1)
            fi
        ;;
        *)
            true
        ;;
    esac
    export OS=${CUR_OS}
    echo ${OS}
}
get_os &> /dev/null

get_slc_version()
{
    CUR_OS=$(get_os)
    SLC_VERSION="NOT SLC"
    case "${CUR_OS}" in
        Scientific\ Linux*)
            if [[ -r '/etc/issue' ]] ; then
                # check /etc/issue
                export SLC_VERSION=`head -1 /etc/issue | awk -F"release" '{print $2}' | sed "s/[^0-9.]"//g | awk -F"." '{print $1}'`
            fi
        ;;
    esac
    echo ${SLC_VERSION}
}
get_slc_version &> /dev/null

get_arch()
{
    export ARCH=`uname -m`
    echo ${ARCH}
}
get_arch &> /dev/null

env_info()
{
    echo -e "  ${LIGHTCYAN}arch:${NC}   $(uname -srmp)";
    echo -e "  ${LIGHTCYAN}os:${NC}     $(get_os)";
    echo -e "  ${LIGHTCYAN}uptime:${NC} $(uptime)";
    echo -e "  ${LIGHTCYAN}gcc:${NC}    $(which gcc)";
    echo -e "  ${LIGHTCYAN}python:${NC} $(which python)";
    echo -e "  ${LIGHTCYAN}ROOT:${NC}   ${ROOTSYS}"
    echo -e "  ${LIGHTCYAN}PATH:${NC}"
    print_path ${PATH}
    echo -e "  ${LIGHTCYAN}LD_LIBRARY_PATH:${NC}"
    print_path ${LD_LIBRARY_PATH}
    echo -e "  ${LIGHTCYAN}PYTHONPATH:${NC}"
    print_path ${PYTHONPATH}
}
alias envi="env_info"


#-----------------------------------------------------------------------------
# welcome
#-----------------------------------------------------------------------------
welcome()
{
    echo -e "Hello ${USER}.  Welcome to ${LIGHTGREEN}${HOSTNAME}${NC} (${LIGHTCYAN}${ME}${NC})."
    echo -e "Today is $(date)."
    echo -e "arch: $(uname -srmp)"
    echo -e "os:   $(get_os)"
    echo -e "uptime: $(uptime)"
}


# execute welcome
#-----------------------------------------------------------------------------
welcome


#-----------------------------------------------------------------------------
# guarantee back to no-color
echo -ne "$NC"


# print end of welcome header
echo -e "________________________________________________________________________________"


# EOF
