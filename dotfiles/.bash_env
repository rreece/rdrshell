#!/bin/bash
#-----------------------------------------------------------------------------
# file: .bash_env
# author: Ryan Reece <ryan.reece@cern.ch>
# date : 2010-06-21
# -----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# control
#-----------------------------------------------------------------------------
SETUP_GCC=true
SETUP_PYTHON=true
SETUP_ROOT=true
SETUP_PYQT=false
SETUP_NUMPY=false
SETUP_ORACLE=false


#-----------------------------------------------------------------------------
# resolve ME
#-----------------------------------------------------------------------------
## To customize this, you can write your own .bash_resolve_me file containing
## a definition of the function resolve_me().  The file could be as simple as:
##     export ME=foo
## or you could write an equivalent to the resolve_me() below for the systems
## that you use.  Just make sure it exports ME.
if [ -f ~/.bash_resolve_me ]; then
    source ~/.bash_resolve_me
else
    resolve_me()
    {
        CUR_ME="unknown"
        # check the HOSTNAME of the server
        case "$HOSTNAME" in
            lxplus*|pc-penn-*|trtdaq2|*.cern.ch)
                CUR_ME="afs"
            ;;
            at3*.hep.upenn.edu)
                CUR_ME="pennt3";
            ;;
            atlas*.ucsc.edu|int*.ucsc.edu|wrk*.ucsc.edu)
                CUR_ME="ucsct3"
            ;;
            borg5)
                CUR_ME="ucsc_web"
            ;;
            darwin)
                CUR_ME="nas"
            ;;
            *)
                # otherwise, check the os
                UNAME_OS=`uname`
                case "${UNAME_OS}" in
                    Darwin)
                        CUR_ME="mac"
                    ;;
                    Linux)
                        CUR_ME="linux"
                    ;;
                    SunOS)
                        CUR_ME="solaris"
                    ;;
                    *)
                        echo -e "${LIGHTRED}~/.bash_env doesn't recognize this host, ${HOSTNAME}.  Let's hope it has afs.${NC}"
                        CUR_ME="afs"
                    ;;
                esac
            ;;
        esac
        export ME=${CUR_ME}
    }

    # execute resolve_me
    resolve_me
fi


#-----------------------------------------------------------------------------
# environment helper functions
#-----------------------------------------------------------------------------
print_path()
{
    i=1;
    for p in $(echo $1 | tr -s ':' ' ') ; do
        printf "%6i. %s\n" $i "$p";
        let i++;
    done
}

get_os_simple()
{
    CUR_OS="unknown"
    UNAME_OS=$(uname)
    case "${UNAME_OS}" in
        Darwin)
            CUR_OS="mac"
        ;;
        Linux)
            CUR_OS="linux"
        ;;
        SunOS)
            CUR_OS="solaris"
        ;;
        *)
            true
        ;;
    esac
    export OS_SIMPLE=${CUR_OS}
    echo ${OS_SIMPLE}
}
get_os_simple &> /dev/null

get_os()
{
    CUR_OS="unknown"
    simple=$(get_os_simple)
    case "${simple}" in
        linux)
            if [[ -r '/etc/issue' ]] ; then
                # check /etc/issue
                CUR_OS=$(echo $(head -1 /etc/issue) | cut -d'\' -f1)
            fi
        ;;
        mac)
            # check for mac file structure
            if [ -d "/System" ]; then 
                CUR_OS="Mac OS `sw_vers -productVersion`"
            fi
        ;;
        solaris)
            if [[ -r '/etc/release' ]] ; then
                # check /etc/issue
                CUR_OS=$(echo $(head -1 /etc/release) | cut -d'\' -f1)
            fi
        ;;
        *)
            true
        ;;
    esac
    export OS=${CUR_OS}
    echo ${OS}
}
get_os &> /dev/null

get_slc_version()
{
    CUR_OS=$(get_os)
    SLC_VERSION="NOT SLC"
    case "${CUR_OS}" in
        Scientific\ Linux*)
            if [[ -r '/etc/issue' ]] ; then
                # check /etc/issue
                export SLC_VERSION=`head -1 /etc/issue | awk -F"release" '{print $2}' | sed "s/[^0-9.]"//g | awk -F"." '{print $1}'`
            fi
        ;;
    esac
    echo ${SLC_VERSION}
}
get_slc_version &> /dev/null

get_arch()
{
    export ARCH=`uname -m`
    echo ${ARCH}
}
get_arch &> /dev/null

env_info()
{
    echo -e "  ${LIGHTCYAN}arch:${NC}   $(uname -srmp)";
    echo -e "  ${LIGHTCYAN}os:${NC}     $(get_os)";
    echo -e "  ${LIGHTCYAN}uptime:${NC} $(uptime)";
    echo -e "  ${LIGHTCYAN}gcc:${NC}    $(which gcc)";
    echo -e "  ${LIGHTCYAN}python:${NC} $(which python)";
    echo -e "  ${LIGHTCYAN}ROOT:${NC}   ${ROOTSYS}"
    echo -e "  ${LIGHTCYAN}PATH:${NC}"
    print_path ${PATH}
    echo -e "  ${LIGHTCYAN}LD_LIBRARY_PATH:${NC}"
    print_path ${LD_LIBRARY_PATH}
    echo -e "  ${LIGHTCYAN}PYTHONPATH:${NC}"
    print_path ${PYTHONPATH}
}
alias envi="env_info"


#-----------------------------------------------------------------------------
# welcome
#-----------------------------------------------------------------------------
welcome()
{
    echo -e "Hello ${USER}.  Welcome to ${LIGHTGREEN}${HOSTNAME}${NC} (${LIGHTCYAN}${ME}${NC})."
    echo -e "Today is $(date)."
    echo -e "arch: $(uname -srmp)"
    echo -e "os:   $(get_os)"
    echo -e "uptime: $(uptime)"
}

# execute welcome
welcome
echo -ne "$LIGHTCYAN"


#-----------------------------------------------------------------------------
# basic environment setup
#-----------------------------------------------------------------------------
case "$ME" in
    pennt3)
        echo "  - setupATLAS"
        echo -ne "${NC}"
        export ATLAS_LOCAL_ROOT_BASE="/opt/ATLASLocalRootBase"
        alias setupATLAS='source ${ATLAS_LOCAL_ROOT_BASE}/user/atlasLocalSetup.sh'
#        setupATLAS # not working, so...
        source ${ATLAS_LOCAL_ROOT_BASE}/user/atlasLocalSetup.sh
        echo -ne "$LIGHTCYAN"
    ;;
    ucsct3)
        echo -ne "${NC}"

        if [ -f /etc/bashrc_t3 ]; then
            source /etc/bashrc_t3
        fi

        echo -ne "$LIGHTCYAN"
    ;;
    ucsc_web)
        export PATH=/opt/csw/bin:/usr/sfw/bin:$PATH
    ;;
    *)
        true
    ;;
esac


#-----------------------------------------------------------------------------
# gcc
#-----------------------------------------------------------------------------
mysetup_gcc()
{
    case "$ME" in
        afs)
            if [[ $SLC_VERSION = "4" && $ARCH = "i386" ]]; then
                echo "  - setting up gcc 4.3"
                source /afs/cern.ch/sw/lcg/contrib/gcc/4.3/slc4_ia32_gcc34/setup.sh
            elif [[ $SLC_VERSION = "4" && $ARCH = "x86_64" ]]; then
                echo "  - setting up gcc 4.3"
                source /afs/cern.ch/sw/lcg/contrib/gcc/4.3/slc4_amd64_gcc34/setup.sh
            elif [[ $SLC_VERSION = "5" && $ARCH = "i386" ]]; then
                echo "  - setting up gcc 4.3"
                source /afs/cern.ch/sw/lcg/contrib/gcc/4.3/i686-slc5-gcc34-opt/setup.sh
            elif [[ $SLC_VERSION = "5" && $ARCH = "x86_64" ]]; then
                echo "  - setting up gcc 4.3"
                source /afs/cern.ch/sw/lcg/contrib/gcc/4.3/x86_64-slc5-gcc43-opt/setup.sh
            elif [[ $SLC_VERSION = "6" && $ARCH = "x86_64" ]]; then
                echo "  - setting up gcc 4.7"
                source /afs/cern.ch/sw/lcg/contrib/gcc/4.7/x86_64-slc6-gcc47-opt/setup.sh
            else
                echo "  - not setting up gcc"
            fi
        ;;
        nas)
            true
        ;;
        pennt3)
            echo "  - setting up gcc 4.32"
            localSetupGcc --gccVersion=gcc432_x86_64_slc5 --quiet
        ;;
        ucsct3)
            true # use default local setup (GCC 4.4.7)
        ;;
        ucsc_web)
            true
        ;;
        mac|linux|solaris)
            true
        ;;
        *)
            echo "  - not setting up gcc"
        ;;
    esac
}

if $SETUP_GCC ; then
    mysetup_gcc
fi


#-----------------------------------------------------------------------------
# python
#-----------------------------------------------------------------------------
mysetup_python()
{
    case "$ME" in
        afs)
            if [[ $SLC_VERSION = "4" && $ARCH = "i386" ]]; then
                echo "  - setting up Python 2.5.4"
                export PYTHONDIR=/afs/cern.ch/sw/lcg/external/Python/2.5.4/slc4_ia32_gcc43
            elif [[ $SLC_VERSION = "4" && $ARCH = "x86_64" ]]; then
                echo "  - setting up Python 2.5.4"
                export PYTHONDIR=/afs/cern.ch/sw/lcg/external/Python/2.5.4/slc4_amd64_gcc43
            elif [[ $SLC_VERSION = "5" && $ARCH = "i386" ]]; then
                echo "  - setting up Python 2.5.4"
                export PYTHONDIR=/afs/cern.ch/sw/lcg/external/Python/2.5.4/i686-slc5-gcc43-opt
            elif [[ $SLC_VERSION = "5" && $ARCH = "x86_64" ]]; then
                echo "  - setting up Python 2.6.5"
                export PYTHONDIR=/afs/cern.ch/sw/lcg/external/Python/2.6.5/x86_64-slc5-gcc43-opt
            elif [[ $SLC_VERSION = "6" && $ARCH = "x86_64" ]]; then
                echo "  - setting up Python 2.7.3"
                export PYTHONDIR=/afs/cern.ch/sw/lcg/external/Python/2.7.3/x86_64-slc6-gcc47-opt
            else
                echo "  - not setting up python"
            fi
            export PATH=$PYTHONDIR/bin:$PATH
            export LD_LIBRARY_PATH=$PYTHONDIR/lib:$LD_LIBRARY_PATH
        ;;
        nas)
            true
        ;;
        pennt3)
            echo "  - setting up Python 2.6.5"
            localSetupPython --pythonVersion=2.6.5-x86_64-slc5-gcc43 --quiet
        ;;
        ucsct3)
            true # use default local setup (python 2.7.5 compiled with GCC 4.4.7)
        ;;
        ucsc_web)
            true
        ;;
        mac|linux|solaris)
            true
        ;;
        *)
            echo "  - not setting up python"
        ;;
    esac
}

if $SETUP_PYTHON ; then
    mysetup_python
fi


#-----------------------------------------------------------------------------
# ROOT and PyROOT
#-----------------------------------------------------------------------------
mysetup_root()
{
    do_setup_root=false
    case "$ME" in
        afs)
            if [[ $SLC_VERSION = "4" && $ARCH = "i386" ]]; then
                echo "  - setting up ROOT 5.26.00a"
                export ROOTSYS=/afs/cern.ch/sw/lcg/app/releases/ROOT/5.26.00a/slc4_ia32_gcc43/root
            elif [[ $SLC_VERSION = "4" && $ARCH = "x86_64" ]]; then
                echo "  - setting up ROOT 5.26.00a"
                export ROOTSYS=/afs/cern.ch/sw/lcg/app/releases/ROOT/5.26.00a/slc4_amd64_gcc43/root
            elif [[ $SLC_VERSION = "5" && $ARCH = "i386" ]]; then
                echo "  - setting up ROOT 5.28.00a"
                export ROOTSYS=/afs/cern.ch/sw/lcg/app/releases/ROOT/5.28.00a/i686-slc5-gcc43-opt/root
            elif [[ $SLC_VERSION = "5" && $ARCH = "x86_64" ]]; then
                echo "  - setting up ROOT 5.34.03"
                export ROOTSYS=/afs/cern.ch/sw/lcg/app/releases/ROOT/5.34.03/x86_64-slc5-gcc43-opt/root
            elif [[ $SLC_VERSION = "6" && $ARCH = "x86_64" ]]; then
                source /afs/cern.ch/sw/lcg/app/releases/ROOT/5.34.09/x86_64-slc6-gcc47-opt/root/bin/thisroot.sh
                export ROOTSYS=/afs/cern.ch/sw/lcg/app/releases/ROOT/5.34.09/x86_64-slc6-gcc47-opt/root
                echo "  - setting up ROOT 5.34.03"
            else
                echo "  - not setting up root"
            fi
        ;;
        nas)
            true
        ;;
        pennt3)
            echo "  - setting up ROOT 5.34.03"
            localSetupROOT --rootVersion=5.34.03-x86_64-slc5-gcc4.3 --skipConfirm --quiet
        ;;
        ucsct3)
            true # use default local setup (ROOT v5.34.17 for python 2.7.5 and gcc 4.4.7)
        ;;
        ucsc_web)
            true
        ;;
        mac|linux)
            export ROOTSYS=/opt/root
            do_setup_root=true
        ;;
        solaris)
            true
        ;;
        *)
        echo "  - not setting up root"
        ;;
    esac

    if [ $do_setup_root ]; then
        # if ROOTSYS is defined, setup the root paths
        export PATH=$ROOTSYS/bin:$PATH
        export LD_LIBRARY_PATH=$ROOTSYS/lib:$LD_LIBRARY_PATH
        export PYTHONPATH=$ROOTSYS/pyroot:$ROOTSYS/lib:$PYTHONPATH
    fi
}

if $SETUP_ROOT ; then
    mysetup_root
fi


#-----------------------------------------------------------------------------
# pyqt
#-----------------------------------------------------------------------------
mysetup_pyqt()
{
    case "$ME" in
        afs)
            if [ $SLC_VERSION = "4" ]; then
                echo "  - setting up PyQt"
                export PYTHONPATH=/afs/cern.ch/sw/lcg/external/sip/4.7.9_python2.5/slc4_ia32_gcc34/lib/python/2.5/site-packages:$PYTHONPATH
                export LD_LIBRARY_PATH=/afs/cern.ch/sw/lcg/external/sip/4.7.9_python2.5/slc4_ia32_gcc34/lib/python/2.5/site-packages:$LD_LIBRARY_PATH
                export PYTHONPATH=/afs/cern.ch/sw/lcg/external/pyqt/4.4.4_python2.5/slc4_ia32_gcc34/lib/python2.5/site-packages:$PYTHONPATH
                export LD_LIBRARY_PATH=/afs/cern.ch/sw/lcg/external/qt/4.4.2/slc4_ia32_gcc34/lib:$LD_LIBRARY_PATH
            elif [ $SLC_VERSION = "5" ]; then
                echo "  - setting up PyQt"
                export PYTHONPATH=/afs/cern.ch/sw/lcg/external/sip/4.7.9_python2.5/slc4_ia32_gcc34/lib/python/2.5/site-packages:$PYTHONPATH
                export PYTHONPATH=/afs/cern.ch/sw/lcg/external/sip/4.7.9_python2.5/i686-slc5-gcc43-opt/lib/python/2.5/site-packages:$PYTHONPATH
                export LD_LIBRARY_PATH=/afs/cern.ch/sw/lcg/external/sip/4.7.9_python2.5/i686-slc5-gcc43-opt/lib/python/2.5/site-packages:$LD_LIBRARY_PATH
                export PYTHONPATH=/afs/cern.ch/sw/lcg/external/pyqt/4.4.4_python2.5/i686-slc5-gcc43-opt/lib/python2.5/site-packages:$PYTHONPATH
                export LD_LIBRARY_PATH=/afs/cern.ch/sw/lcg/external/qt/4.4.2/i686-slc5-gcc43-opt/lib:$LD_LIBRARY_PATH
            else
                echo "  - not setting up PyQt"
            fi
        ;;
        *)
            echo "  - not setting up PyQt"
        ;;
    esac
}

if $SETUP_PYQT ; then
    mysetup_pyqt
fi


#-----------------------------------------------------------------------------
# numpy and matplotlib
#-----------------------------------------------------------------------------
mysetup_numpy()
{
    case "$ME" in
        afs)
            if [ $SLC_VERSION = "4" ]; then
                echo "  - setting up numpy"
                export PYTHONPATH=/afs/cern.ch/atlas/software/builds/AtlasCore/15.5.1/InstallArea/i686-slc4-gcc34-opt/lib/python2.5:$PYTHONPATH
            elif [ $SLC_VERSION = "5" ]; then
                echo "  - setting up numpy"
    #            export PYTHONPATH=/afs/cern.ch/atlas/software/builds/AtlasCore/latest/External/AtlasNumPy/x86_64-slc5-gcc43-opt/pkg-build-install-numpy/lib/python2.5:$PYTHONPATH
                export PYTHONPATH=/afs/cern.ch/atlas/software/builds/AtlasCore/latest/InstallArea/x86_64-slc5-gcc43-opt/lib/python2.5:$PYTHONPATH
                export LD_LIBRARY_PATH=/afs/cern.ch/atlas/software/builds/AtlasCore/latest/InstallArea/x86_64-slc5-gcc43-opt/lib:$LD_LIBRARY_PATH
            else
                echo "  - not setting up numpy"
            fi
        ;;
        *)
            echo "  - not setting up numpy"
        ;;
    esac
}

if $SETUP_NUMPY ; then
    mysetup_numpy
fi


#-----------------------------------------------------------------------------
# castor
#-----------------------------------------------------------------------------
mysetup_castor()
{
    case "$ME" in
        afs)
#            export STAGE_SVCCLASS="atlcal"
            export STAGE_SVCCLASS="atldata"
#            export STAGE_SVCCLASS="atlascernuserdisk"
        ;;
        *)
            echo "  - not setting up CASTOR"
        ;;
    esac
}

if [ $ME = "afs" ]; then
    mysetup_castor
fi


#-----------------------------------------------------------------------------
# athena and grid tools setup
#-----------------------------------------------------------------------------
case "$ME" in
    afs)
        export AtlasSetup=/afs/cern.ch/atlas/software/dist/AtlasSetup
        alias asetup='source $AtlasSetup/scripts/asetup.sh'
        alias setup_cmt="source /afs/cern.ch/sw/contrib/CMT/v1r21/mgr/setup.sh"
        alias setup_panda="source /afs/cern.ch/atlas/offline/external/GRID/DA/panda-client/latest/etc/panda/panda_setup.sh"
        export PATHENA_GRID_SETUP_SH="/afs/cern.ch/project/gd/LCG-share/current_3.2/etc/profile.d/grid-env.sh"
    ;;
    pennt3)
        export AtlasSetup=/afs/cern.ch/atlas/software/dist/AtlasSetup
        alias asetup='source $AtlasSetup/scripts/asetup.sh'
        #alias setup_cmt="source /afs/cern.ch/sw/contrib/CMT/v1r20p20090520/mgr/setup.sh"
        alias setup_cmt="source /afs/cern.ch/sw/contrib/CMT/v1r21/mgr/setup.sh"
        alias setup_panda="source /afs/cern.ch/atlas/offline/external/GRID/DA/panda-client/latest/etc/panda/panda_setup.sh"
        #export PATHENA_GRID_SETUP_SH="/afs/cern.ch/project/gd/LCG-share/current/etc/profile.d/grid_env.sh"
        export PATHENA_GRID_SETUP_SH="/afs/cern.ch/project/gd/LCG-share/current_3.2/etc/profile.d/grid-env.sh"

        # dq2
        dq2-setup()
        {
            source /afs/cern.ch/project/gd/LCG-share/current/external/etc/profile.d/grid-env.sh
            sleep 1
            voms-proxy-init -voms atlas
            sleep 1
            source /afs/cern.ch/atlas/offline/external/GRID/ddm/DQ2Clients/setup.sh
        }
    ;;
    ucsct3)
        true
#        dq2-setup()
#        {   
#            export DQ2_LOCAL_SITE_ID=ROAMING
#           # export DQ2_LOCAL_SITE_ID=SLACXRD_SCRATCHDISK
#            localSetupDQ2Client --skipConfirm
#            voms-proxy-init -voms atlas
#        }   
    ;;
    *)
        true
    ;;
esac


#-----------------------------------------------------------------------------
# xrootd
#-----------------------------------------------------------------------------
# case "$ME" in
#     pennt3)
#         xls()
#         {
#             xrd hn.at3f dirlist $1
#         }
#     ;;
#     ucsct3)
#         xls-headprv()
#         {
#             xrd headprv dirlist $1
#         }
#         xls-nfsprv()
#         {
#             xrd nfsprv dirlist $1
#         }
#     ;;
# esac


#-----------------------------------------------------------------------------
# oracle
#-----------------------------------------------------------------------------
mysetup_oracle()
{
    case "$ME" in
        afs)
            if [ $SLC_VERSION = "4" ]; then
                echo "  - setting up oracle"
                export LD_LIBRARY_PATH=/afs/cern.ch/sw/lcg/external/oracle/11.2.0.1.0/slc4_ia32_gcc34/lib:$LD_LIBRARY_PATH
                export PYTHONPATH=/afs/cern.ch/sw/lcg/external/cx_Oracle/5.0.1_python2.5/slc4_ia32_gcc34/lib/python2.5/site-packages:$PYTHONPATH
            elif [ $SLC_VERSION = "5" ]; then
                echo "  - setting up oracle"
                export LD_LIBRARY_PATH=/afs/cern.ch/sw/lcg/external/oracle/11.2.0.1.0/x86_64-slc5-gcc43-opt/lib:$LD_LIBRARY_PATH
                export PYTHONPATH=/afs/cern.ch/sw/lcg/external/cx_Oracle/5.0.1_python2.5/x86_64-slc5-gcc43-opt/lib/python2.5/site-packages:$PYTHONPATH
            else
                echo "  - not setting up oracle"
            fi
        ;;
        *)
            echo "  - not setting up oracle"
        ;;
    esac
    alias ora="~/.rlfe/rlfe -size 150 sqlplus atlas_trt_elec_w/B.W1ll1ams@ATLAS_ELTRT"
}

if $SETUP_ORACLE ; then
    mysetup_oracle
fi


#-----------------------------------------------------------------------------
# yaml
#-----------------------------------------------------------------------------
if [ $ME = "pennt3" ]; then
    echo "  - setting up PyYAML"
    export PYTHONPATH=/usr/local/lib/python2.6/site-packages:$PYTHONPATH
fi


#-----------------------------------------------------------------------------
# guarantee back to no-color
echo -ne "$NC"

# print end of welcome header
echo -e "________________________________________________________________________________"

# EOF
